<?php//exit('数据备份中，请稍候再试！');define('INRUMBLE', TRUE);error_reporting(0);if($_GET['page'] === 'chart' && !empty($_GET['action']) && $_GET['action'] === 'view') {	include dirname(__FILE__) . '/../../library/php/other_common.php';} else {	include dirname(__FILE__) . '/../../bbs/source/class/class_core.php';	C::app()->init();		function xneg($val) {		return($val !== '' && $val !== '-');	}	function sortcol(&$array, $keyname, $order, $id = TRUE) {		$tmp = array();		foreach($array as $key => $val) {			$tmp[$key] = $val[$keyname];			$voteavg[$key] = $val['voteavg'];		}		$$keyname = $tmp;		//print('<pre>');print_r($$keyname);print_r($array);print('</pre>');		if($id === TRUE)			array_multisort($$keyname, SORT_NUMERIC, ($order === '1') ? SORT_ASC : SORT_DESC, $voteavg, SORT_NUMERIC, SORT_DESC, $array);		else			array_multisort($$keyname, SORT_NUMERIC, ($order === '1') ? SORT_ASC : SORT_DESC, $array);	}	function arrayRecursive(&$array, $function, $apply_to_keys_also = false){		static $recursive_counter = 0;		if (++$recursive_counter > 1000) {			die('possible deep recursion attack');		}		foreach ($array as $key => $value) {			if (is_array($value)) {				arrayRecursive($array[$key], $function, $apply_to_keys_also);			} else {				$array[$key] = $function($value);			}	  			if ($apply_to_keys_also && is_string($key)) {				$new_key = $function($key);				if ($new_key != $key) {					$array[$new_key] = $array[$key];					unset($array[$key]);				}			}		}		$recursive_counter--;	}	function json($array) {		arrayRecursive($array, 'urlencode', true);		$json = json_encode($array);		return urldecode($json);	}	function jexit($str, $status = '') {		if($status === 'error') $str['msg'] = '<font color=\"#cd3030\">' . $str['msg'] . '</font>';		elseif($status === 'success') $str['msg'] = '<font color=\"#ddae0a\">' . $str['msg'] . '</font>';		echo is_array($str) ? json($str) : $str;		exit;	}	function getrdate($id, $round, $data) {		/* data is the participant info for a specific round */		global $config;				$i = 1;		foreach($data as $val) {			if(in_array($id, explode(',', $val))) {				break;			}			++$i;		}		//if($i === count($val)) return FALSE;				$dayset = 12 + array_sum(str_split(substr($config['days'], 0, $round))) + ceil($i / $config['groupt'][$round][1]);		$dayset = (($dayset < 32) ? '7' : '8') . '-' . (($dayset < 32) ? $dayset : $dayset - 31);		return $dayset;	}	function getround($date) {		global $config;		$tmp = explode('-', $date);		foreach($config['date'] as $key => $val) {			list($month, $day) = explode('-', $val);			if($tmp[0] <= $month && $tmp[1] < $val) return $key - 1;		}	}}date_default_timezone_set('Asia/Shanghai');define('CACHEPATH', 'cache');define('ROOT', dirname(__FILE__));define('IMGPATH', 'image');define('TPLID', 'rumble');define('TPLPATH', './../rumble/2013/template');define('SWITCH', FALSE);$title = array(	'index'		=> '预告', 	'home'		=> '首页', 	'timetable'	=> '赛程表', 	'rank'		=> '排行榜', 	'rules'		=> '规则介绍', 	'report'	=> '战报', 	'admin'		=> '后台', 	'chart'		=> '实况');$date		= 'xxxxxxxxxxxx0000001111222222334444555566666666777777778888889';$config		= array(	'days' => '6462448861',								# days of the round	'vote' => '5482421211',								# people for vote	'won' => '5481421211',								# pokemon for won or revive	'row' => '6425442322', 									# row caculation	'date' => array('7-12', '7-19', '7-23', '7-29', '7-31', '8-4', '8-8', '8-16', '8-24', '8-30', '8-30'), 	'group' => array(12, 8, 4, 5, 8, 4, 2, 4, 2, 2), 	# pokemon for each group	'groupt' => array(array(54, 9), array(32, 8), array(16, 4), array(16, 8), array(8, 2), 		array(8, 2), array(8, 1), array(2, 1), array(1, 1), array(1, 1)), 	# total groups	'name' => array('海选赛', '分组赛', '小组赛', '复活赛', '淘汰赛', '晋级赛', '对抗赛', '循环赛', '半决赛', '决赛'), 	'deal' => array('7-13' => range(1, 9), '7-14' => range(10, 18), '7-15' => range(19, 27), '7-16' => range(28, 36), '7-17' => range(37, 45), 		'7-18' => range(46, 54), '7-19' => range(1, 8), '7-20' => range(9, 16), '7-21' => range(17, 24), '7-22' => range(25, 32), 		'7-23' => array('A-1', 'B-1', 'C-1', 'D-1'), '7-24' => array('A-2', 'B-2', 'C-2', 'D-2'), '7-25' => array('A-3', 'B-3', 'C-3', 'D-3'), 		'7-26' => array('A-4', 'B-4', 'C-4', 'D-4'), '7-27' => array('A-5', 'B-5', 'C-5', 'D-5'), '7-28' => array('A-6', 'B-6', 'C-6', 'D-6'), 		'7-29' => range(1, 8), '7-30' => range(9, 16), '7-31' => range(1, 2), '8-1' => range(3, 4), 		'8-2' => range(5, 6), '8-3' => range(7, 8), '8-4' => range(1, 2), '8-5' => range(3, 4), '8-6' => range(5, 6), 		'8-7' => range(7, 8), '8-8' => range(1, 1), '8-9' => range(2, 2), '8-10' => range(3, 3), '8-11' => range(4, 4), 		'8-12' => range(5, 5), '8-13' => range(6, 6), '8-14' => range(7, 7), '8-15' => range(8, 8), '8-16' => array('A-1'), 		'8-17' => array('A-2'), '8-18' => array('A-3'), '8-19' => array('A-4'), '8-20' => array('B-1'), '8-21' => array('B-2'), 		'8-22' => array('B-3'), '8-23' => array('B-4'), '8-24' => array(1), '8-25' => array(2), '8-26' => array(3), 		'8-27' => array(4), '8-28' => array(5), '8-29' => array(6), '8-30' => array(1)	));$mode		= array();$month		= date('n', $_SERVER['REQUEST_TIME']);$day		= date('j', $_SERVER['REQUEST_TIME']);$month = 8;$day = 31;//if($_GET['aaa'] === '1') $day = 23;$round		= $date{($month == 7) ? $day - 1 : 30 + $day};$gm			= !empty($_GET['aaa']) ? true : false; //in_array($_G['uid'], array(8, 1333));			if(!in_array($_GET['page'], array('home', 'timetable', 'rank', 'rules', 'report', 'admin', 'chart')))	$_GET['page'] = 'home';if(in_array($_GET['page'], array('home', 'timetable', 'rank', 'rules', 'report', 'admin', 'chart'))) {		$title = array($_GET['page'], $title[$_GET['page']]);	if($_GET['page'] === 'chart') {		if($_GET['action'] === 'view') {						if($_GET['mode'] === 'ind' && empty($config['deal'][$_GET['dt']])) {				exit;			}						include ROOT . '/../../library/jpgraph/jpgraph.php';			include ROOT . '/../../library/jpgraph/jpgraph_line.php';						$h		= date('G');			$h		= 23;			$tmp	= explode('-', $_GET['dt']);			$offset	= ($tmp[0] == 7) ? $tmp[1] - 1 : 30 + $tmp[1];			$round	= $date{$offset} + 1;			$start	= strtotime('2013-' . $_GET['dt']);			$trans = array('一', '二', '三', '四', '五', '六', '七', '八');			$groupdata = unserialize($db->result_first('SELECT entrant FROM ext_rumble_participant WHERE round = ' . $round));						$group = $_GET['t'];			if($_GET['mode'] === 'ind' && (empty($group) || empty($groupdata[$group]))) exit;			$pokemon = $data = array();			$query = $db->query('SELECT info, dateline FROM ext_rumble_userinfo WHERE info IN (' . $groupdata[$group] . (($_GET['u'] === 'y') ? ',' . $groupdata[($round === 8) ? substr($group, 3, 1) + 1 : $group + 1] : '') . ') AND dateline >= ' . $start . ' AND dateline < ' . ($start + 86400));			//exit('sad');						$label = range(0, 24);			$graph = new Graph(960, 400);			$graph->SetScale('intint');			$graph->SetMargin(50, 50, 50, 50);			$graph->legend->SetFont(FF_SIMSUN, FS_BOLD);			$graph->title->Set(($_GET['mode'] === 'ind') ? (($_GET['u'] === 'y') ? $config['name'][$round - 1] . '第' . $trans[$offset - strpos($date, (string) ($round - 1))] . '场': $config['name'][$round - 1] . '第' . $group . '组') : '总票数时段统计表');			$graph->title->SetFont(FF_SIMSUN, FS_BOLD);			$graph->xaxis->title->Set('时间');			$graph->xaxis->title->SetFont(FF_SIMSUN, FS_BOLD);			$graph->xaxis->SetTickLabels($label);			$graph->yaxis->title->Set('票数');			$graph->yaxis->title->SetFont(FF_SIMSUN, FS_BOLD);			$graph->yaxis->HideZeroLabel();			//$graph->yaxis->HideLine(false);			//$graph->yaxis->HideTicks(false,false);			//$graph->ygrid->SetFill(false);						while($vote = $db->fetch_array($query)) {				$hour = floor(($vote['dateline'] - $start) / 3600) + 1;				if($_GET['mode'] === 'ind') {					++$pokemon[$vote['info']]['time'][$hour];				} else {					++$total[$hour];				}			}			//print_r($pokemon);			if($_GET['mode'] === 'ind') {				$query = $db->query('SELECT id, name FROM pm_data WHERE id IN (' . $groupdata[$group] . (($_GET['u'] === 'y') ? ',' . $groupdata[($round === 8) ? substr($group, 3, 1) + 1 : $group + 1] : '') . ')');				while($info = $db->fetch_array($query)) {					$pokemon[$info['id']]['name'] = $info['name'];					if(empty($pokemon[$info['id']]['time'])) {						$pokemon[$info['id']]['time'] = array_fill(0, $h + 2, 0);					} else {						for($i = 0, $j = $h + 1; $i <= $j; $i++) {							$pokemon[$info['id']]['time'][$i] = $pokemon[$info['id']]['time'][$i] + $pokemon[$info['id']]['time'][$i - 1];						}					}				}				//phpinfo();exit;				//print_r($pokemon);				//$db->query('DELETE FROM ext_rumble_userinfo WHERE dateline >= ' . $start . ' AND dateline < ' . ($start + 86400));				//print_r($pokemon);exit;				ksort($pokemon);				$color = array('#c19b17', '#449736', '#2ea8d0', '#ef6e6e', '#db457d', '#d8d641', '#9fc361', '#c866cc');				$i = 0;				foreach($pokemon as $key => $val) {					$lineplot = new LinePlot($val['time']);					$graph->Add($lineplot);					$lineplot->SetColor($color[$i]);					$lineplot->SetLegend($val['name']);					$lineplot->mark->SetColor($color[$i]);					$lineplot->mark->SetFillColor($color[$i]);					$lineplot->mark->SetType(MARK_FILLEDCIRCLE, '', 1.0);					$lineplot->SetCenter();					++$i;				}			} else {				$tmp = array_sum($total);				for($i = 0, $j = $h + 1; $i <= $j; $i++) {					if($i === 0) {						$total[$i] = 0;					} elseif(empty($total[$i])) {						$total[$i] = $tmp;					} else {						$total[$i] = $total[$i - 1] + $total[$i];					}				}				//print_r($total);exit;				ksort($total);				$lineplot = new LinePlot($total);				$graph->Add($lineplot);			}			$graph->legend->SetLayout(LEGEND_HOR);			$graph->legend->SetFrameWeight(1);			$graph->legend->SetColor('#666','#666');			$graph->legend->SetMarkAbsSize(8);			$graph->Stroke();		} else {			$image = array();			if($_GET['mode'] === 'ind') {				foreach($config['deal'][$month . '-' . $day] as $key => $val) {					$image[] = '?page=chart&action=view&mode=ind&dt=' . $month . '-' . $day . '&t=' . $val;				}			} else {				$image[] = '?page=chart&action=view&dt=' . $month . '-' . $day;			}		}	} elseif($_GET['page'] === 'rank') {		/* Get the number of people in each day */		$people = array();		for($i = 7; $i < 9; $i++) {			$end = ($i === 7) ? 31 : 30;						for($j = (($i === 7) ? 13 : 1); $j <= $end; $j++) {				if($i == $month && $j > $day || $i === 8 && $j === 31) {					$mark = 1;					break;				}								$start = strtotime('2013-' . $i . '-' . $j);				$query = DB::query('SELECT COUNT(ip) c FROM ext_rumble_userinfo WHERE dateline >= ' . $start . ' AND dateline < ' . ($start + 86400) . ' GROUP BY ip');				$people[$i . '-' . $j] = 0;				while($peoples = DB::fetch($query)) {					++$people[$i . '-' . $j];				}			}			if($mark == 1) break;		}		$arr = array(			133 => array('8-16', '8-17', '8-19', '8-24', '8-26', '8-27'), 			136 => array('8-16', '8-17', '8-18'), 			155 => array('8-17', '8-18', '8-19'), 			471 => array('8-16', '8-17', '8-18', '8-24', '8-28', '8-29'), 			25 => array('8-20', '8-21', '8-22', '8-25', '8-27', '8-29'), 			350 => array('8-21', '8-22', '8-23', '8-25', '8-26', '8-28'), 			385 => array('8-20', '8-21', '8-23'), 			495 => array('8-20', '8-22', '8-23')		);				foreach($arr as $key => $val) {			$people['round-8-' . $key] = $people['round-9-' . $key] = 0;			foreach($val as $valb) {				$tmp = substr($valb, 2);				$people['round-' . (($tmp > 15 && $tmp < 24) ? '8' : (($tmp > 23 && $tmp < 30) ? '9' : '0')) . '-' . $key] += $people[$valb];			}		}		//if($_GET['aaaa'] === '1') print_r($people);				/* Get every round's pokemon */		$rounds = array();		$query = DB::query('SELECT round, entrant FROM ext_rumble_participant');		while($tmp = DB::fetch($query)) {			$rounds[$tmp['round']] = unserialize($tmp['entrant']);		}				//if($gm) print_r($people);		/* Get pokemon info & calculate data */		$query = DB::query('SELECT s.id, s.s1, s.s2, s.s3, s.s4, s.s5, s.s6, s.s7, s.s8, s.s9, s.s10, d.name FROM ext_rumble_scorelist s LEFT JOIN pm_data d ON s.id = d.id ORDER BY s.id');		while($list = DB::fetch($query)) {			$arr = array($list['s1'], $list['s2'], $list['s3'], $list['s4'], $list['s5'], $list['s6'], $list['s7'], $list['s8'], $list['s9'], $list['s10']);			//$tmp = array_filter($arr, 'xneg');			$list['ss1'] = $list['s6'];			$list['voteavg'] = 0;			$list['votesum'] = array_sum($arr);			$i = 0;			foreach($arr as $key => $val) {				if(empty($val)) continue;				$k = 's' . ($key + 1);				$list['stop'] = $key;				if($key === 7 || $key === 8) {					$list[$k] = $val / $people['round-' . ($key + 1) . '-' . $list['id']] * 100;				} else {					$d = getrdate($list['id'], $key, $rounds[$key + 1], TRUE);					$list[$k] = ($d > 0) ? $val / $people[$d] * 100 : 0;				}				//if($key == 2) print_r($list['id'] . ' : s' . ($key + 1) . ' : ' . $val . ' : ' . $d . ' : ' . $people[$d] . "\n");				if($key !== 3) {					$list['voteavg'] += $list[$k];					++$i;				}				$list[$k] = ($list[$k] > 0) ? $list[$k] . '%' : '';			}			$list['voteavg'] = $list['voteavg'] / $i;						//$list['total']		= array_sum($tmp);			//$list['average']	= $list['total'] / count($tmp) * 1;			$score[$list['id']]	= $list;		}		$pn = !empty($_GET['pn']) ? intval($_GET['pn']) : 1;		$limit = ($gm) ? 649 : 50;		$total = count($score);		$start = ($pn - 1) * $limit;		if(empty($_GET['st']) || !in_array($_GET['st'], array('s1', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 's9', 's10', 'voteavg', 'id', 'stop'))) $_GET['st'] = $round === '' ? 'voteavg' : 's' . ($round + 1);		if(empty($_GET['ot']) || !in_array($_GET['ot'], array('1', '2'))) $_GET['ot'] = '2';		sortcol($score, $_GET['st'], $_GET['ot']);						/* first round conclusion */				if($_GET['aaa'] === '1') {			$pscore = $score;			$teamrank = $r = array();			$statround = 5;			$i = 16;			foreach($pscore as $key => $val) {				if($val['ss1'] <= 0) {					unset($pscore[$key]);					continue;				}				$d = getrdate($val['id'], $statround, $statround + 1);				foreach($rounds[$statround + 1] as $keyb => $valb) {					if(in_array($val['id'], explode(',', $valb))) {						$pscore[$key]['group'] = $keyb;						break;					}				}			}			sortcol($pscore, 's' . ($statround + 1), '2');			foreach($pscore as $key => $val) {								$r[$val['group']] = $pscore[$key]['grouprank'] = $r[$val['group']] + 1;				if(in_array($val['id'], explode(',', '282,448,197,136,25,175,385,495,133,148,196,350,471,251,172,155'))) {					unset($pscore[$key]);					continue;				}				$i = $pscore[$key]['rank'] = $i + 1;			}		}		/* end */				$score = array_slice($score, $start, $limit);				$all = ceil($total / $limit);		$mulpage = '<div class="r pn">';		for($i = 1; $i <= $all; $i++) {			$mulpage .= '<span' . (($i == $pn) ? ' class="cur"' : '') . '><a href="?page=rank&pn=' . $i .'&ot=' . $_GET['ot'] . '&st=' . $_GET['st'] . '">' . $i . '</a></span>';		}		$mulpage .= '</div>';				$_GET['ot'] = ($_GET['ot'] === '2') ? '1' : '2';			} elseif($_GET['page'] === 'report') {		$data = array();		$trans = array('一', '二', '三', '四', '五', '六', '七', '八');		if($round === '') {			$round = '9';		}		if(empty($_GET['dt']) || empty($config['deal'][$_GET['dt']])) {			for($i = 0; $i <= $round; $i++) {				$j = 0;				$data[$i] = array(					'name' => $config['name'][$i] . '战报', 					'report' => array()				);				$tmpb = array_slice($config['deal'], array_sum(array_slice(str_split($config['days']), 0, $i)), $config['days']{$i});				foreach($tmpb as $key => $val) {					$tmp = explode('-', $key);					if($tmp[0] == $month && $tmp[1] >= $day) break;					$data[$i]['report'][$key] = array(						'name' => $config['name'][$i] . (($i === 9) ? '' : '第' . $trans[$j] . '场'), 						'url' => '?page=report&dt=' . $tmp[0] . '-' . $tmp[1]					);					++$j;				}			}		} else {			$tmp = explode('-', $_GET['dt']);			$offset = ($tmp[0] == 7) ? $tmp[1] - 1 : 30 + $tmp[1];			$round = $date{$offset};			$name = $config['name'][$round] . (($round === '9') ? '' : '第' . $trans[$offset - strpos($date, (string) $round)] . '场战报');			if($round > 1 && $round < 4) $config['groupt'][$round][1] = 0;			elseif($round === '5') $config['groupt'][$round][1] = 5;			for($i = 0; $i <= $config['groupt'][$round][1]; $i++)				$data[] = IMGPATH . '/report/report-' . $_GET['dt'] . '-' . $i . '.jpg';		}	} elseif($_GET['page'] === 'home') {				if($_GET['ajax'] === '1' && is_array($_GET['pokemon'])) {			$stime = strtotime(date('Y-m-d', $_SERVER['REQUEST_TIME']));			$ftime = $stime + 86400;			$authdate = '2013-' . $month . '-' . $day;			$tmp = 			//(ip = \'' . $_G['clientip'] . '\' OR ip LIKE \'' . implode('.', array_pop(explode('.', $_G['clientip']))) . '.%\')			$query = DB::result_first('SELECT ip FROM ext_rumble_userinfo WHERE (ip = \'' . $_G['clientip'] . '\' OR ip LIKE \'' . implode('.', array_slice(explode('.', $_G['clientip']), 0, 3)) . '.%\') AND dateline > ' . $stime . ' AND dateline < ' . $ftime . '');			if(!empty($query)/*  || !empty($_COOKIE['jAndeMXas'])&& $_COOKIE['jAndeMXas'] === md5($authdate)*/) {				$return['msg'] = '您今日已投过票了！';				//setcookie('jAndeMXas', md5($authdate), strtotime($authdate) + 1000000);				jexit($return, 'error');			}			$data = unserialize(DB::result_first('SELECT entrant FROM ext_rumble_participant WHERE round = ' . ($round + 1)));			$count = $tmp = $group = $id = array();			$pokemon = $_GET['pokemon'];			foreach($pokemon as $key => $val) {				foreach($val as $keyb => $valb) {					$pokemon[$key][$keyb] = $id[] = intval($valb);					if(!in_array($key, $config['deal'][$month . '-' . $day])) {						$return['msg'] = '小组不属于当天投票范围！';						jexit($return, 'error');					}					if($count[$key] >= $config['vote']{$round}) {						$return['msg'] = '每组最多给' . $config['vote']{$round} . '只精灵！';						jexit($return, 'error');					} elseif(!in_array($pokemon[$key][$keyb], explode(',', $data[$key]))) {						$return['msg'] = '您选择的精灵不在当天投票范围内！';						jexit($return, 'error');					} else {						++$count[$key];					}					$tmp[] = '(\'' . $_G['clientip'] . '\', ' . $_SERVER['REQUEST_TIME'] . ', ' . $pokemon[$key][$keyb] . ')';				}			}			if($round !== '2') {				foreach($config['deal'][$month . '-' . $day] as $val) {					if($count[$val] < 1) {						$return['msg'] = '请至少投给第' . $val . '组的1只精灵！';						jexit($return, 'error');					}				}			}			//setcookie('jAndeMXas', md5($authdate), strtotime($authdate) + 1000000);			DB::query('UPDATE ext_rumble_scorelist SET s' . ($round + 1) . ' = s' . ($round + 1) . ' + 1 WHERE id IN (' . implode(',', $id) . ')');			DB::query('INSERT INTO ext_rumble_userinfo (ip, dateline, info) VALUES ' . implode(',', $tmp));			$return['msg'] = '投票成功！';			jexit($return, 'success');		} elseif($_GET['ajax'] === '1') {			$return['msg'] = '请选择精灵！';			jexit($return);		} elseif($round !== 'x') {			$data = unserialize(DB::result_first('SELECT entrant FROM ext_rumble_participant WHERE round = ' . ($round + 1)));			if($_GET['aaaa'] === '1') print_r($data);			//print_r('<pre>');print_r($data);print_r('</pre>');			if(!empty($config['deal'][$month . '-' . $day])) {				$entrants = array();				$stime = strtotime('2013-' . $month . '-' . $day);				foreach($config['deal'][$month . '-' . $day] as $val) {					if(empty($data[$val])) break;					//$query = DB::query(($round === '0') ? 'SELECT id, name FROM pm_data WHERE id IN (' . $data[$val] . ')' : 'SELECT d.id, d.name, s.s' . ($round + 1) . ' score FROM pm_data d LEFT JOIN ext_rumble_scorelist s ON d.id = s.id WHERE d.id IN (' . $data[$val] . ')');					$query = DB::query(($round === '0') ? 'SELECT id, name FROM pm_data WHERE id IN (' . $data[$val] . ')': 'SELECT id, name FROM pm_data WHERE id IN (' . $data[$val] . ')');					//'SELECT COUNT(*) score, d.id, d.name FROM ext_rumble_userinfo u LEFT JOIN pm_data d ON u.info = d.id WHERE u.dateline >= ' . $stime . ' AND u.dateline < ' . ($stime + 86400) . ' AND d.id IN (' . $data[$val] . ') GROUP BY u.info');					while($entrant = DB::fetch($query)) {						$entrant['score'] = DB::result_first('SELECT COUNT(*) FROM ext_rumble_userinfo  WHERE dateline >= ' . $stime . ' AND dateline < ' . ($stime + 86400) . ' AND info = ' . $entrant['id']);;						$entrants[$val][] = $entrant;					}				}			}			$trans = array('一', '二', '三', '四', '五', '六', '七', '八');			$offset = ($month == 7) ? $day - 1 : 30 + $day;			$round = $date{$offset};			$data = array(				'name' => $config['name'][$round] . '第' . $trans[$offset - strpos($date, (string) $round)] . '场', 				'width' => ($round === '2') ? '100' : '960', 				'sign' => ($round === '2') ? '%' : 'px'			);		}	} elseif($_GET['page'] === 'admin' && $gm) {		switch($_GET['action']) {			case 'initialize':				exit;				DB::query('UPDATE ext_rumble_scorelist SET s1 = \'\', s2 = \'\', s3 = \'\', s4 = \'\', s5 = \'\', s6 = \'\', s7 = \'\', s8 = \'\', s9 = \'\', s10 = \'\'');				DB::query('DELETE FROM ext_rumble_userinfo');				//for($i=1;$i<650;$i++)DB::query('INSERT INTO ext_rumble_scorelist (id) VALUES (' . $i . ')');				//DB::query('UPDATE ext_rumble_participant SET entrant = \'\'');				echo '重置成功！';				break;			case 'entrant':				$query = DB::query('SELECT round, entrant FROM ext_rumble_participant ORDER BY round');				$infos = array();				while($info = DB::fetch($query)) {					$tmp = array();					foreach(unserialize($info['entrant']) as $key => $val) {						if(empty($key)) break;						$tmp[] = $key . ':' . $val;					}					$infos[] = implode(PHP_EOL, $tmp);				}				break;			case 'updateentrant':				$data = array();				for($i = 0; $i <= 9; $i++) {					$_POST['entrant_' . $i] = explode(PHP_EOL, $_POST['entrant_' . $i]);					$tmp = array();					foreach($_POST['entrant_' . $i] as $key => $val) {						$val = explode(':', $val);						$tmpb = array();						foreach(explode(',', $val[1]) as $keyb => $valb) {							if($valb > 0 && $valb < 650) $tmpb[] = intval($valb);						}						$tmp[$val[0]] = implode(',', $tmpb);					}					$data[$i] = '(' . ($i + 1) . ', \'' . serialize($tmp) . '\')';				}				DB::query('INSERT INTO ext_rumble_participant (round, entrant) VALUES ' . implode(',', $data) . ' ON DUPLICATE KEY UPDATE entrant = VALUES(entrant)');				echo '<pre>';print_r($data);echo '</pre>';				echo '更新成功！';				break;			case 'statistic':								/* list */				$data = array();				$trans = array('一', '二', '三', '四', '五', '六', '七', '八');				if($round === '') {					$round = '9';				}				if(empty($_GET['dt']) || empty($config['deal'][$_GET['dt']])) {					for($i = 0; $i <= $round; $i++) {						$j = 0;						$datab[$i] = array(							'name' => $config['name'][$i] . '统计', 							'report' => array()						);						$tmpb = array_slice($config['deal'], array_sum(array_slice(str_split($config['days']), 0, $i)), $config['days']{$i});						foreach($tmpb as $key => $val) {							$tmp = explode('-', $key);							if($tmp[0] == $month && $tmp[1] > $day) break;							$datab[$i]['report'][$key] = array(								'name' => $config['name'][$i] . '第' . $trans[$j] . '场', 								'url' => '?page=admin&action=statistic&aaa=1&dt=' . $tmp[0] . '-' . $tmp[1]							);							++$j;						}					}					/* total */					$query = DB::query('SELECT COUNT(ip) c FROM ext_rumble_userinfo GROUP BY ip');					$j = $c = 0;					while($people = DB::fetch($query)) {						++$j;						$c += $people['c'];					}										$data = array(						'c_people' => $j, 						'c_peopleavg' => round($c / $j, 2), 						'c_vote' => DB::result_first('SELECT COUNT(*) FROM ext_rumble_userinfo')					);				} else {					$tmp = explode('-', $_GET['dt']);					$offset = ($tmp[0] == 7) ? $tmp[1] - 1 : 30 + $tmp[1];					$round = $date{$offset} + 1;					$start = strtotime('2013-' . $_GET['dt']);										$query = DB::query('SELECT COUNT(ip) c FROM ext_rumble_userinfo WHERE dateline >= ' . $start . ' AND dateline < ' . ($start + 86400) . ' GROUP BY ip');					$j = $c = 0;					while($people = DB::fetch($query)) {						++$j;						$c += $people['c'];					}					$data = array(						'name' => $config['name'][$round - 1] . '第' . $trans[$offset - strpos($date, (string) ($round - 1))] . '场统计', 						'group' => implode(',', $config['deal'][$tmp[0] . '-' . $tmp[1]]), 						'round' => $config['name'][$round - 1], 						'date' => date('Y-m-d', $start), 						'pokemon' => array(), 						'rank' => array(), 						'c_people' => $j, 						'c_peopleavg' => round($c / $j, 2), 						'c_vote' => DB::result_first('SELECT COUNT(*) FROM ext_rumble_userinfo WHERE dateline >= ' . $start . ' AND dateline < ' . ($start + 86400)), 						'c_voteavg' => 0, 						'c_groupscore' => array(), 						't_groupscore' => array()					);					$c = array(); // group score counter					$groupdata = unserialize(DB::result_first('SELECT entrant FROM ext_rumble_participant WHERE round = ' . $round));					foreach($config['deal'][$tmp[0] . '-' . $tmp[1]] as $key => $val) {						$query = DB::query('SELECT s.id, s.s' . $round . ' score, d.name FROM ext_rumble_scorelist s LEFT JOIN pm_data d ON s.id = d.id WHERE s.id IN (' . $groupdata[$val] . ') ORDER BY s.s' . $round . ' DESC');						while($pokemon = DB::fetch($query)) {							if($round === 8 || $round === 9) {								$pokemon['score'] = DB::result_first('SELECT COUNT(*) FROM ext_rumble_userinfo WHERE info = ' . $pokemon['id'] . ' AND dateline >= ' . $start . ' AND dateline < ' . ($start + 86400));							}							$pokemon['avg'] = round($pokemon['score'] / $data['c_people'] * 100, 2) . '%';							$pokemon['gen'] = ($pokemon['id'] < 152) ? '1' : ($pokemon['id'] < 252) ? '2' : ($pokemon['id'] < 387) ? '3' : ($pokemon['id'] < 494) ? 4 : 5;							$data['c_voteavg'] += $pokemon['avg'];							$data['c_groupscore'][$val] = $c[$val] = $c[$val] + $pokemon['score']; # round 3 only							$data['pokemon'][$val][] = $data['rank'][] = $pokemon; # ready for the string connection of ranking						}						sortcol($data['pokemon'][$val], 'score', '2', FALSE);						}					sortcol($data['rank'], 'score', '2', FALSE);					$data['c_voteavg'] = round($data['c_voteavg'] / count($data['rank']), 2);					arsort($data['c_groupscore']); #round 3 only					$data['t_groupscore'] = array_slice($data['c_groupscore'], 0, 2); #round 3 only				}				break;			case 'correct':				define('OPEN', FALSE);				if($_G['uid'] == 8 && $_GET['auth'] === '111') {					$ids = $ips = array();					$time = array(strtotime('2013-8-30'), strtotime('2013-8-31'));					print_r('<pre>');					//ip NOT IN (\'106.86.167.201\', \'106.86.142.169\', \'106.86.103.31\', \'106.86.107.208\') AND ip LIKE \'106.86%\' AND u.dateline > 1374422400 AND u.dateline < 1374508600 					$query = DB::query('SELECT u.ip, u.info, d.name FROM ext_rumble_userinfo u LEFT JOIN pm_data d ON u.info = d.id WHERE					ip IN (\'101.226.51.229\',\'101.226.65.110\',\'101.226.66.179\',\'101.226.74.168\',\'101.226.89.121\',\'101.228.162.90\',\'101.228.64.144\',\'101.85.49.147\',\'106.3.37.81\',\'106.3.44.133\',\'106.86.103.119\',\'106.86.104.104\',\'106.86.106.189\',\'106.86.107.195\',\'106.86.108.45\',\'106.86.110.145\',\'106.86.111.253\',\'106.86.112.22\',\'106.86.114.13\',\'106.86.115.136\',\'106.86.116.14\',\'106.86.118.70\',\'106.86.119.92\',\'106.86.120.103\',\'106.86.121.240\',\'106.86.122.213\',\'106.86.123.80\',\'106.86.124.177\',\'106.86.125.112\',\'106.86.128.20\',\'106.86.129.54\',\'106.86.132.28\',\'106.86.133.243\',\'106.86.134.198\',\'106.86.135.132\',\'106.86.136.102\',\'106.86.137.46\',\'106.86.139.156\',\'106.86.141.137\',\'106.86.146.72\',\'106.86.150.197\',\'106.86.153.92\',\'106.86.155.255\',\'106.86.156.89\',\'106.86.158.133\',\'106.86.159.45\',\'106.86.160.198\',\'106.86.161.48\',\'106.86.164.118\',\'106.86.165.138\',\'106.86.167.114\',\'106.86.169.177\',\'106.86.170.138\',\'106.86.177.108\',\'106.86.180.59\',\'106.86.183.140\',\'106.86.184.121\',\'106.86.185.29\',\'106.86.188.6\',\'106.86.189.12\',\'106.86.190.67\',\'106.86.96.86\',\'106.86.98.216\',\'106.86.99.75\',\'111.14.47.106\',\'111.140.52.149\',\'112.124.44.111\',\'112.225.63.65\',\'112.90.231.26\',\'113.91.209.117\',\'114.105.119.57\',\'114.113.229.39\',\'114.80.157.181\',\'114.88.205.28\',\'114.88.51.123\',\'114.88.78.123\',\'115.200.92.158\',\'115.211.227.246\',\'115.236.8.34\',\'115.236.9.85\',\'115.28.41.102\',\'116.237.93.56\',\'117.25.79.185\',\'117.25.89.192\',\'117.25.91.149\',\'117.27.214.94\',\'117.88.83.240\',\'118.186.153.96\',\'118.186.197.221\',\'118.186.240.111\',\'118.186.5.178\',\'118.244.173.26\',\'118.244.214.145\',\'120.210.163.69\',\'120.210.165.15\',\'120.210.166.74\',\'120.210.182.148\',\'121.199.33.124\',\'121.199.38.5\',\'121.199.43.32\',\'121.199.51.128\',\'121.199.52.202\',\'121.229.74.193\',\'122.224.186.199\',\'122.224.228.133\',\'122.224.231.140\',\'122.224.88.28\',\'122.96.45.177\',\'122.96.59.98\',\'123.138.51.171\',\'123.138.79.30\',\'124.133.99.48\',\'124.207.53.242\',\'124.232.147.88\',\'124.232.165.235\',\'125.84.253.80\',\'125.84.254.153\',\'14.104.188.95\',\'14.111.214.16\',\'140.206.255.217\',\'140.206.88.83\',\'162.105.84.29\',\'171.105.15.186\',\'180.111.220.128\',\'180.111.84.163\',\'180.153.163.189\',\'180.153.201.211\',\'180.153.205.253\',\'180.153.206.37\',\'180.153.214.181\',\'180.153.223.81\',\'180.160.50.119\',\'180.166.165.154\',\'180.172.85.153\',\'180.98.12.110\',\'180.98.9.109\',\'183.130.48.163\',\'183.138.92.68\',\'183.5.5.52\',\'211.157.148.165\',\'218.108.240.35\',\'218.108.242.124\',\'218.108.54.42\',\'218.66.83.46\',\'219.140.153.114\',\'219.140.159.156\',\'219.140.165.45\',\'219.143.5.251\',\'221.224.195.42\',\'221.232.247.27\',\'222.125.82.217\',\'222.128.22.145\',\'222.240.72.154\',\'222.70.218.104\',\'222.70.230.88\',\'27.17.62.67\',\'27.36.157.87\',\'27.36.24.220\',\'42.120.20.157\',\'42.120.5.235\',\'42.121.114.168\',\'42.121.116.23\',\'42.121.118.94\',\'42.121.124.184\',\'42.121.128.203\',\'42.121.131.249\',\'42.121.132.69\',\'42.121.137.72\',\'42.121.2.214\',\'42.121.30.196\',\'42.121.33.164\',\'42.121.56.109\',\'42.121.77.93\',\'42.96.143.124\',\'42.96.144.189\',\'42.96.146.22\',\'42.96.149.254\',\'42.96.150.173\',\'42.96.154.116\',\'42.96.158.165\',\'42.96.162.128\',\'42.96.166.69\',\'42.96.168.152\',\'42.96.169.249\',\'42.96.171.140\',\'42.96.172.185\',\'42.96.173.16\',\'42.96.184.41\',\'42.96.196.103\',\'58.215.179.194\',\'58.247.228.152\',\'58.33.233.76\',\'58.34.166.161\',\'59.173.98.88\',\'59.175.238.76\',\'59.188.73.40\',\'59.53.91.35\',\'60.188.96.204\',\'60.55.9.24\',\'98.126.20.66\') AND u.dateline >= ' . $time[0] . ' AND u.dateline < ' . $time[1] . ' ORDER BY u.ip');					while($pokemon = DB::fetch($query)) {						++$ids[$pokemon['info']];						if(!in_array($pokemon['ip'], $ips)) $ips[] = '\'' . $pokemon['ip'] . '\'';						$data[] = $pokemon['ip'] . ': No. ' . $pokemon['info'] . ' ' . $pokemon['name'];					}					if(OPEN === TRUE) {						DB::query('DELETE FROM ext_rumble_userinfo WHERE ip IN (' . implode(',', $ips) . ') AND dateline > ' . $time[0] . ' AND dateline < ' . $time[1]);						foreach($ids as $key => $val) {							DB::query('UPDATE ext_rumble_scorelist SET s9 = s9 - ' . $val . ' WHERE id = ' . $key);						}					} else {						print_r($time);						print_r(implode(PHP_EOL, $data));					}					print_r($ids);					print_r('</pre>');				}				break;			case 'finalscore':				/*$query = DB::query('SELECT FROM participant ORDER BY round DESC');				$data = $pms = array();				while($p = DB::fetch($query)) {					foreach(explode(',', implode(',', unserialize($data['entrant']))) as $val) {						$data[$val]['round-' . $p['round']] = DB::result						$data[$val]['stop'] = 				*/				break;		}	}	$_GET['page'] = 'index_2';} else {	$title = array('index', $title['index']);	$_GET['page'] = 'index';}		include template($_GET['page'], TPLID, TPLPATH);?>